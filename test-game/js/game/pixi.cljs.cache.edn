{:use-macros nil, :excludes #{}, :name game.pixi, :imports nil, :requires {dommy dommy.core, dommy.core dommy.core}, :uses nil, :defs {set-anchor {:name game.pixi/set-anchor, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 108, :column 1, :end-line 108, :end-column 21, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 108, :column 11, :end-line 108, :end-column 21}}, rotate! {:name game.pixi/rotate!, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 124, :column 1, :end-line 124, :end-column 18, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 124, :column 11, :end-line 124, :end-column 18}}, set-size {:name game.pixi/set-size, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 79, :column 1, :end-line 79, :end-column 19, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 79, :column 11, :end-line 79, :end-column 19}}, attach-el! {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 32, :column 7, :end-line 32, :end-column 17, :arglists (quote ([child parent]))}, :name game.pixi/attach-el!, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 17, :method-params ([child parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child parent]))}, mk-layer {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([z-index] [z-index z-order-fn])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([z-index] [z-index z-order-fn]), :arglists ([z-index] [z-index z-order-fn]), :arglists-meta (nil nil)}}, :name game.pixi/mk-layer, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([z-index] [z-index z-order-fn]), :arglists ([z-index] [z-index z-order-fn]), :arglists-meta (nil nil)}, :method-params ([z-index] [z-index z-order-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists ([z-index] [z-index z-order-fn])}, move {:name game.pixi/move, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 64, :column 1, :end-line 64, :end-column 15, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 64, :column 11, :end-line 64, :end-column 15}}, attach-list! {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([display-list stage]))}, :name game.pixi/attach-list!, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 19, :method-params ([display-list stage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([display-list stage]))}, pixi {:name game.pixi/pixi, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 4, :column 1, :end-line 4, :end-column 14, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 4, :column 10, :end-line 4, :end-column 14}}, mk-sprite {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 151, :column 7, :end-line 151, :end-column 16, :arglists (quote ([tex & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(tex args)], :arglists ([tex & args]), :arglists-meta (nil)}}, :name game.pixi/mk-sprite, :variadic true, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(tex args)], :arglists ([tex & args]), :arglists-meta (nil)}, :method-params [(tex args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists ([tex & args])}, get-pos {:name game.pixi/get-pos, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 36, :column 1, :end-line 36, :end-column 18, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 36, :column 11, :end-line 36, :end-column 18}}, update-pos! {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 154, :column 7, :end-line 154, :end-column 18, :arglists (quote ([{:keys [x y sprite], :as el}]))}, :name game.pixi/update-pos!, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 18, :method-params ([p__10558]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y sprite], :as el}]))}, dispatch {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 18, :column 8, :end-line 18, :end-column 16, :private true, :arglists (quote ([el]))}, :private true, :name game.pixi/dispatch, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 16, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el]))}, mk-display-list {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 21, :column 7, :end-line 21, :end-column 22, :arglists (quote ([]))}, :name game.pixi/mk-display-list, :variadic false, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mk-view {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([width height & base])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(width height base)], :arglists ([width height & base]), :arglists-meta (nil)}}, :name game.pixi/mk-view, :variadic true, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(width height base)], :arglists ([width height & base]), :arglists-meta (nil)}, :method-params [(width height base)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists ([width height & base])}, update-sprite! {:name game.pixi/update-sprite!, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 131, :column 1, :end-line 131, :end-column 25, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 131, :column 11, :end-line 131, :end-column 25}}, set-scale {:name game.pixi/set-scale, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 93, :column 1, :end-line 93, :end-column 20, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 93, :column 11, :end-line 93, :end-column 20}}, set-pos {:name game.pixi/set-pos, :file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 49, :column 1, :end-line 49, :end-column 18, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/pixi.cljs", :line 49, :column 11, :end-line 49, :end-column 18}}}, :require-macros {dommy dommy.core, dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{:y :transparent :stage :scale :raw :default :pos :renderer :size :sprite :layer :list :id :position :x :anchor :hierarchy :body :wrapped}, :order [:transparent :body :position :id :renderer :stage :sprite :wrapped :raw :hierarchy :default :x :y :scale :pos :size :layer :list :anchor]}, :doc nil}