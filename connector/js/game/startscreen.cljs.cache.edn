{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name game.startscreen, :imports nil, :requires {cljs.core.async cljs.core.async, chans game.chans, game.chans game.chans, dommy dommy.core, dommy.core dommy.core, hipo hipo.core, hipo.core hipo.core}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async}, :defs {events {:name game.startscreen/events, :file "src-cljs/game/startscreen.cljs", :line 9, :column 1, :end-line 9, :end-column 12, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/startscreen.cljs", :line 9, :column 6, :end-line 9, :end-column 12}}, init {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/startscreen.cljs", :line 11, :column 7, :end-line 11, :end-column 11, :arglists (quote ([]))}, :name game.startscreen/init, :variadic false, :file "src-cljs/game/startscreen.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, enter {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/startscreen.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([state]))}, :name game.startscreen/enter, :variadic false, :file "src-cljs/game/startscreen.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, exit {:protocol-inline nil, :meta {:file "/home/hermann-p/workspace/noodleconnection/game/src-cljs/game/startscreen.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([state]))}, :name game.startscreen/exit, :variadic false, :file "src-cljs/game/startscreen.cljs", :end-column 11, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, dommy dommy.core, dommy.core dommy.core, hipo hipo.core, hipo.core hipo.core}, :cljs.analyzer/constants {:seen #{:div.button :done :else :recur :div.selection :font :span.view :id :h1 :left}, :order [:span.view :id :h1 :div.selection :div.button :font :left :done :recur :else]}, :doc nil}